#!/usr/bin/env node

/**
 * È™åËØÅÁøªËØë‰øÆÂ§çÊïàÊûú
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verifying translation fixes...\n');

// 1. Ê£ÄÊü•ÁøªËØëÊñá‰ª∂ÁöÑÂÆåÊï¥ÊÄß
console.log('1. Checking translation file integrity:');

const zhPath = path.join(process.cwd(), 'messages/zh.json');
const enPath = path.join(process.cwd(), 'messages/en.json');

if (fs.existsSync(zhPath) && fs.existsSync(enPath)) {
  const zh = JSON.parse(fs.readFileSync(zhPath, 'utf8'));
  const en = JSON.parse(fs.readFileSync(enPath, 'utf8'));
  
  // Ê£ÄÊü•painTracker.assessment.recommendationsÁªìÊûÑ
  const zhRecommendations = zh.interactiveTools?.painTracker?.assessment?.recommendations;
  const enRecommendations = en.painTracker?.assessment?.recommendations;
  
  console.log('  Chinese recommendations structure:');
  if (zhRecommendations) {
    Object.keys(zhRecommendations).forEach(key => {
      const rec = zhRecommendations[key];
      const hasActionSteps = Array.isArray(rec.actionSteps);
      console.log(`    ${key}: ${hasActionSteps ? '‚úÖ' : '‚ùå'} actionSteps (${hasActionSteps ? rec.actionSteps.length : 'not array'})`);
      if (hasActionSteps && rec.actionSteps.length > 0) {
        console.log(`      First step: "${rec.actionSteps[0]}"`);
      }
    });
  } else {
    console.log('    ‚ùå Not found');
  }
  
  console.log('  English recommendations structure:');
  if (enRecommendations) {
    Object.keys(enRecommendations).forEach(key => {
      const rec = enRecommendations[key];
      const hasActionSteps = Array.isArray(rec.actionSteps);
      console.log(`    ${key}: ${hasActionSteps ? '‚úÖ' : '‚ùå'} actionSteps (${hasActionSteps ? rec.actionSteps.length : 'not array'})`);
      if (hasActionSteps && rec.actionSteps.length > 0) {
        console.log(`      First step: "${rec.actionSteps[0]}"`);
      }
    });
  } else {
    console.log('    ‚ùå Not found');
  }
  
  // Ê£ÄÊü•ÊòØÂê¶ÊúâÈáçÂ§çÁöÑrecommendationsÈÉ®ÂàÜ
  const zhContent = JSON.stringify(zh);
  const enContent = JSON.stringify(en);
  
  const zhRecommendationsCount = (zhContent.match(/"recommendations":/g) || []).length;
  const enRecommendationsCount = (enContent.match(/"recommendations":/g) || []).length;
  
  console.log(`\n  Recommendations sections count:`);
  console.log(`    Chinese: ${zhRecommendationsCount}`);
  console.log(`    English: ${enRecommendationsCount}`);
  
  // Ê£ÄÊü•ÊòØÂê¶ÊúâÈîôËØØÁöÑactionStepsÊ†ºÂºè
  const zhBadActionSteps = zhContent.includes('"actionSteps": "[ZH]');
  const enBadActionSteps = enContent.includes('"actionSteps": "[EN]');
  
  console.log(`\n  Bad actionSteps format:`);
  console.log(`    Chinese: ${zhBadActionSteps ? '‚ùå Found' : '‚úÖ Clean'}`);
  console.log(`    English: ${enBadActionSteps ? '‚ùå Found' : '‚úÖ Clean'}`);
  
} else {
  console.log('  ‚ùå Translation files not found');
}

// 2. Ê£ÄÊü•useSymptomAssessment hook
console.log('\n2. Checking useSymptomAssessment hook:');

const hookPath = path.join(process.cwd(), 'app/[locale]/interactive-tools/shared/hooks/useSymptomAssessment.ts');

if (fs.existsSync(hookPath)) {
  const hookContent = fs.readFileSync(hookPath, 'utf8');
  
  // Ê£ÄÊü•ÂÖ≥ÈîÆ‰øÆÂ§ç
  const checks = [
    {
      name: 'Locale parameter in generateRecommendations',
      pattern: /generateRecommendations.*locale\?\: string/,
      status: hookContent.match(/generateRecommendations.*locale\?\: string/) ? '‚úÖ' : '‚ùå'
    },
    {
      name: 'English detection logic',
      pattern: /isEnglish = locale === 'en'/,
      status: hookContent.includes("isEnglish = locale === 'en'") ? '‚úÖ' : '‚ùå'
    },
    {
      name: 'Conditional English fallbacks',
      pattern: /isEnglish \? \[/,
      status: hookContent.includes('isEnglish ? [') ? '‚úÖ' : '‚ùå'
    },
    {
      name: 'Locale parameter passed to generateRecommendations',
      pattern: /generateRecommendations\(.*currentSession\.locale\)/,
      status: hookContent.includes('currentSession.locale') ? '‚úÖ' : '‚ùå'
    }
  ];
  
  checks.forEach(check => {
    console.log(`  ${check.name}: ${check.status}`);
  });
  
} else {
  console.log('  ‚ùå useSymptomAssessment hook not found');
}

// 3. Ê£ÄÊü•SymptomAssessmentToolÁªÑ‰ª∂
console.log('\n3. Checking SymptomAssessmentTool component:');

const componentPath = path.join(process.cwd(), 'app/[locale]/interactive-tools/components/SymptomAssessmentTool.tsx');

if (fs.existsSync(componentPath)) {
  const componentContent = fs.readFileSync(componentPath, 'utf8');
  
  const checks = [
    {
      name: 'Uses useSafeTranslations',
      status: componentContent.includes('useSafeTranslations') ? '‚úÖ' : '‚ùå'
    },
    {
      name: 'Has locale parameter',
      status: componentContent.includes('locale') ? '‚úÖ' : '‚ùå'
    },
    {
      name: 'Passes locale to startAssessment',
      status: componentContent.includes('startAssessment(locale') ? '‚úÖ' : '‚ùå'
    }
  ];
  
  checks.forEach(check => {
    console.log(`  ${check.name}: ${check.status}`);
  });
  
} else {
  console.log('  ‚ùå SymptomAssessmentTool component not found');
}

// 4. ÊÄªÁªì
console.log('\nüéØ Fix Summary:');
console.log('Key improvements implemented:');
console.log('  ‚Ä¢ Language-specific fallback values in useSymptomAssessment');
console.log('  ‚Ä¢ Removed duplicate/corrupted translation entries');
console.log('  ‚Ä¢ Fixed actionSteps format (arrays instead of strings)');
console.log('  ‚Ä¢ Added locale parameter to recommendation generation');

console.log('\nüìã Testing Instructions:');
console.log('  1. Open http://localhost:3009/en/interactive-tools/symptom-assessment');
console.log('  2. Complete the full assessment (answer all 12 questions)');
console.log('  3. Check that Action Steps display in English');
console.log('  4. Verify no Chinese text appears in English version');
console.log('  5. Test Chinese version for comparison');

console.log('\n‚úÖ Translation fix verification complete!');
